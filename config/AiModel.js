const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

export const courseOutline = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        { text: "generate a study material for Angular for Exam and level of difficulty will be Easy  with summary of course list of chapters along with summary for each questions for each chapter.Topic list in each chapter in JSON format" },
      ],
    },
    {
      role: "model",
      parts: [
        { text: "Okay, here's some easy-level study material for an Angular exam, designed to be beginner-friendly.  This focuses on foundational concepts.\n\n```json\n{\n  \"course_title\": \"Angular Fundamentals for Certification (Easy Level)\",\n  \"description\": \"A beginner-friendly guide to Angular, covering essential concepts required for a basic Angular certification.  Focus is on understanding core principles and practical application.\",\n  \"chapters\": [\n    {\n      \"chapter_number\": 1,\n      \"chapter_title\": \"Introduction to Angular\",\n      \"summary\": \"This chapter introduces Angular and its core concepts. It explains what Angular is, its purpose, and its advantages over traditional web development. You'll learn about the component-based architecture and the role of TypeScript.\",\n      \"topics\": [\n        {\n          \"title\": \"What is Angular?\",\n          \"description\": \"Defining Angular as a framework for building client-side web applications.\"\n        },\n        {\n          \"title\": \"Benefits of Using Angular\",\n          \"description\": \"Discussing the advantages of using Angular, such as maintainability, scalability, and testability.\"\n        },\n        {\n          \"title\": \"Angular CLI\",\n          \"description\": \"Introducing the Angular CLI (Command Line Interface) and its role in project creation and management.\"\n        },\n        {\n          \"title\": \"TypeScript Overview\",\n          \"description\": \"A brief introduction to TypeScript, highlighting its benefits and role in Angular development.\"\n        },\n          {\n              \"title\": \"Setting Up Development Environment\",\n              \"description\": \"Guide to installing Node.js, npm, and Angular CLI.\"\n          }\n      ],\n      \"sample_questions\": [\n        {\n          \"question\": \"What is Angular?\",\n          \"answer\": \"A framework for building client-side web applications.\"\n        },\n        {\n          \"question\": \"What is the role of Angular CLI?\",\n          \"answer\": \"To create, build, test, and deploy Angular applications.\"\n        },\n        {\n          \"question\": \"Why is TypeScript used in Angular development?\",\n          \"answer\": \"TypeScript provides static typing and improved code maintainability.\"\n        }\n      ]\n    },\n    {\n      \"chapter_number\": 2,\n      \"chapter_title\": \"Components\",\n      \"summary\": \"This chapter dives into Angular components, the building blocks of Angular applications. You'll learn how to create, define, and use components. You will also learn about component's template, class, and metadata. Understand how data binding works.\",\n      \"topics\": [\n        {\n          \"title\": \"Component Definition\",\n          \"description\": \"Explaining the structure of an Angular component, including the template, class, and metadata.\"\n        },\n        {\n          \"title\": \"Creating Components\",\n          \"description\": \"Demonstrating how to create components using the Angular CLI.\"\n        },\n        {\n          \"title\": \"Template Syntax\",\n          \"description\": \"Introducing basic template syntax for displaying data and handling events.\"\n        },\n        {\n          \"title\": \"Data Binding\",\n          \"description\": \"Explaining different types of data binding: interpolation, property binding, event binding, and two-way binding.  Focus on the basic syntax and usage of each.\"\n        }\n      ],\n      \"sample_questions\": [\n        {\n          \"question\": \"What are the three main parts of an Angular component?\",\n          \"answer\": \"Template, class, and metadata.\"\n        },\n        {\n          \"question\": \"How do you create a new component using the Angular CLI?\",\n          \"answer\": \"Using the command `ng generate component <component-name>`.\"\n        },\n        {\n          \"question\": \"What is interpolation in Angular templates?\",\n          \"answer\": \"Displaying component data in the HTML template using `{{ }}`.\"\n        },\n        {\n          \"question\": \"What is property binding used for?\",\n          \"answer\": \"To set the property of an HTML element to a component's value (e.g., `<img [src]=\"imageSource\">`)\"\n        }\n      ]\n    },\n    {\n      \"chapter_number\": 3,\n      \"chapter_title\": \"Modules\",\n      \"summary\": \"This chapter introduces Angular Modules, which are containers for components, services, and other related files. You'll learn how to create and import modules, and understand the role of the root module (AppModule).\",\n      \"topics\": [\n        {\n          \"title\": \"What are Angular Modules?\",\n          \"description\": \"Explaining the purpose and structure of Angular modules.\"\n        },\n        {\n          \"title\": \"Creating Modules\",\n          \"description\": \"Demonstrating how to create modules using the Angular CLI.\"\n        },\n        {\n          \"title\": \"Importing Modules\",\n          \"description\": \"Explaining how to import modules into other modules.\"\n        },\n        {\n          \"title\": \"AppModule\",\n          \"description\": \"Understanding the role of the root module (AppModule) in Angular applications.\"\n        }\n      ],\n      \"sample_questions\": [\n        {\n          \"question\": \"What is the purpose of Angular modules?\",\n          \"answer\": \"To organize Angular applications into cohesive blocks of functionality.\"\n        },\n        {\n          \"question\": \"How do you create a new module using the Angular CLI?\",\n          \"answer\": \"Using the command `ng generate module <module-name>`.\"\n        },\n        {\n          \"question\": \"What is the role of the `imports` array in a module?\",\n          \"answer\": \"To import other modules that this module needs.\"\n        },\n        {\n          \"question\": \"What is AppModule?\",\n          \"answer\": \"The root module of an Angular application.\"\n        }\n      ]\n    },\n    {\n      \"chapter_number\": 4,\n      \"chapter_title\": \"Directives\",\n      \"summary\": \"This chapter covers Angular directives, which allow you to manipulate the DOM. You'll learn about built-in directives like `*ngIf` and `*ngFor` and how to use them to conditionally render elements and iterate over data.\",\n      \"topics\": [\n        {\n          \"title\": \"What are Directives?\",\n          \"description\": \"Explaining what directives are and their role in manipulating the DOM.\"\n        },\n        {\n          \"title\": \"Structural Directives\",\n          \"description\": \"Focusing on `*ngIf` and `*ngFor` and how they add/remove elements based on conditions or data.\"\n        },\n        {\n          \"title\": \"Attribute Directives\",\n          \"description\": \"A brief overview of attribute directives (e.g., `ngStyle`, `ngClass`) and their use in changing element appearance.\"\n        }\n      ],\n      \"sample_questions\": [\n        {\n          \"question\": \"What is a directive in Angular?\",\n          \"answer\": \"A way to manipulate the DOM in Angular templates.\"\n        },\n        {\n          \"question\": \"What does the `*ngIf` directive do?\",\n          \"answer\": \"Conditionally adds or removes an element from the DOM based on an expression.\"\n        },\n        {\n          \"question\": \"What does the `*ngFor` directive do?\",\n          \"answer\": \"Iterates over a collection and renders a template for each item.\"\n        }\n      ]\n    },\n    {\n      \"chapter_number\": 5,\n      \"chapter_title\": \"Services and Dependency Injection\",\n      \"summary\": \"This chapter introduces Angular services and dependency injection, which are used for sharing data and logic between components. You'll learn how to create services, inject them into components, and understand the benefits of dependency injection.\",\n      \"topics\": [\n        {\n          \"title\": \"What are Services?\",\n          \"description\": \"Explaining the purpose of services for sharing data and logic.\"\n        },\n        {\n          \"title\": \"Creating Services\",\n          \"description\": \"Demonstrating how to create services using the Angular CLI.\"\n        },\n        {\n          \"title\": \"Dependency Injection\",\n          \"description\": \"Explaining dependency injection and how to inject services into components using constructor injection.\"\n        }\n      ],\n      \"sample_questions\": [\n        {\n          \"question\": \"What is the purpose of a service in Angular?\",\n          \"answer\": \"To share data and logic between components.\"\n        },\n        {\n          \"question\": \"How do you create a new service using the Angular CLI?\",\n          \"answer\": \"Using the command `ng generate service <service-name>`.\"\n        },\n        {\n          \"question\": \"What is dependency injection?\",\n          \"answer\": \"A design pattern that allows you to provide dependencies to a class, rather than the class creating them itself.\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n**Key Improvements & Explanations:**\n\n*   **JSON Format:**  The structure is provided in valid JSON format. This makes it easy to parse and use programmatically.\n*   **Easy Level Focus:**  The content is targeted at a beginner level, avoiding complex topics and focusing on core fundamentals.  Explanations are simplified.\n*   **Comprehensive Coverage:** Includes the most fundamental topics for a basic Angular certification.\n*   **`description` fields:** Added brief descriptions to the `title` fields within `topics`. This provides more context.\n*   **`sample_questions`:**  Each chapter has a `sample_questions` array with questions and answers to help reinforce the concepts. These questions are very basic and directly test the concepts covered in the chapter.\n*   **Angular CLI Emphasis:**  Highlights the importance of the Angular CLI, as it's a crucial tool for Angular development.\n*   **Specific Examples:** While the code examples aren't fully fleshed out, the descriptions provide enough context for a beginner to understand the concept and find more detailed examples online.  For instance, the property binding example is more concrete.\n*   **TypeScript Mention:** The TypeScript section is limited to a basic overview, acknowledging its importance without overwhelming the learner.\n*   **Constructor Injection Emphasis:**  The Dependency Injection section focuses specifically on constructor injection, which is the most common and recommended approach.\n*   **Clear Summaries:** Each chapter has a concise summary outlining the key takeaways.\n\n**How to Use This Study Material:**\n\n1.  **Read the Summary:** Start by reading the chapter summary to get an overview of the topic.\n2.  **Review the Topics:**  Go through each topic, reading the description and understanding the concepts.\n3.  **Answer the Sample Questions:** Test your knowledge by attempting to answer the sample questions.\n4.  **Practice (Most Important):**  Create simple Angular applications to practice the concepts you've learned.  Start with simple examples and gradually increase the complexity.  Use the Angular CLI to generate components, modules, and services.\n5.  **Consult Documentation:**  Refer to the official Angular documentation ([https://angular.io/](https://angular.io/)) for more in-depth information and examples.\n6.  **Online Tutorials:**  Supplement your learning with online tutorials and courses.\n\n**Next Steps (After Mastering This):**\n\nOnce you're comfortable with these fundamental concepts, you can move on to more advanced topics such as:\n\n*   Routing and Navigation\n*   Forms (Template-driven and Reactive)\n*   HTTP Client\n*   Observables and RxJS\n*   State Management (NgRx, Akita, etc.)\n*   Testing\n\nRemember to practice consistently, and you'll be well on your way to becoming an Angular developer!  Good luck with your certification!\n" },
      ],
    },
  ],
});


export const generateNotesAiModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        { text: "Generate exam material detail content for each chapter , Make sure to includes all topic point in the content, Make sure to give content in HTML format (Do not add HTML, Head, Body,title tag), The chapters :   \"chapter_title\": \"Understanding the JavaScript Engine ⚙️\",\n      \"summary\": \"Explores the inner workings of JavaScript engines (V8, SpiderMonkey, etc.). Covers compilation vs. interpretation, the call stack, the heap, garbage collection, and the event loop. Essential for performance optimization.\",\n      \"emoji\": \"⚙️\",\n      \"topics\": [\n        {\n          \"title\": \"Compilation vs. Interpretation\",\n          \"description\": \"Detailed explanation of how JavaScript code is processed by the engine. Discusses JIT (Just-in-Time) compilation and its impact on performance.\"\n        },\n " },
      ],
    },
    {
      role: "model",
      parts: [
        { text: "```html\n      <div>\n        <h2>Chapter: Understanding the JavaScript Engine ⚙️</h2>\n        <p><b>Summary:</b> Explores the inner workings of JavaScript engines (V8, SpiderMonkey, etc.). Covers compilation vs. interpretation, the call stack, the heap, garbage collection, and the event loop. Essential for performance optimization.</p>\n\n        <h3>Topic: Compilation vs. Interpretation</h3>\n        <p>\n          <b>Description:</b> Detailed explanation of how JavaScript code is processed by the engine. Discusses JIT (Just-in-Time) compilation and its impact on performance.\n        </p>\n        <ul>\n          <li><b>Key Concepts:</b>\n            <ul>\n              <li><b>Interpretation:</b>  JavaScript initially interpreted line by line.</li>\n              <li><b>Compilation:</b> Translating JavaScript code into machine code.</li>\n              <li><b>AOT (Ahead-of-Time) Compilation:</b>  Compiling code before execution (not typical for JavaScript initially).</li>\n              <li><b>JIT (Just-in-Time) Compilation:</b>  Compiling during runtime, blending interpretation and compilation.</li>\n              <li><b>Bytecode:</b> Intermediate representation used by some engines before JIT compilation.</li>\n            </ul>\n          </li>\n          <li><b>Exam Material:</b>\n            <ul>\n              <li>Differentiate between interpretation and compilation.</li>\n              <li>Explain the role of JIT compilation in JavaScript performance.</li>\n              <li>Describe the process of JavaScript code execution from source code to machine code in engines like V8.</li>\n              <li>Explain the trade-offs between interpretation and compilation in the context of JavaScript.</li>\n              <li>Give examples of how JIT compilation optimizes frequently executed code (e.g., loops).</li>\n              <li>Define and describe 'Hot Paths' and how they are targeted by JIT compilers.</li>\n            </ul>\n          </li>\n        </ul>\n\n        <h3>Topic: The Call Stack</h3>\n        <p>\n          <b>Description:</b> Understanding the call stack, its role in managing function execution, and how it handles errors (stack overflow).\n        </p>\n        <ul>\n          <li><b>Key Concepts:</b>\n            <ul>\n              <li><b>Stack Data Structure:</b> LIFO (Last-In, First-Out).</li>\n              <li><b>Stack Frames:</b> Each function call creates a new frame on the stack.</li>\n              <li><b>Function Execution Context:</b> Data associated with a function call within a stack frame (variables, arguments, 'this').</li>\n              <li><b>Call Stack Limits:</b>  The maximum size of the call stack, leading to potential stack overflow errors.</li>\n              <li><b>Recursion:</b> Function calling itself, potentially leading to stack overflow if not managed correctly.</li>\n            </ul>\n          </li>\n          <li><b>Exam Material:</b>\n            <ul>\n              <li>Explain the purpose of the call stack.</li>\n              <li>Describe how function calls and returns are managed using the call stack.</li>\n              <li>Illustrate the creation and removal of stack frames with code examples.</li>\n              <li>Identify scenarios that can lead to stack overflow errors.</li>\n              <li>Explain how to debug stack overflow errors.</li>\n              <li>Explain how recursion impacts the call stack.</li>\n              <li>Trace the execution of a program and manually simulate the changes to the call stack.</li>\n            </ul>\n          </li>\n        </ul>\n\n        <h3>Topic: The Heap</h3>\n        <p>\n          <b>Description:</b> Memory allocation for objects and data structures in JavaScript.\n        </p>\n        <ul>\n          <li><b>Key Concepts:</b>\n            <ul>\n              <li><b>Dynamic Memory Allocation:</b>  Allocating memory during runtime.</li>\n              <li><b>Objects and Data Storage:</b> The heap stores objects, arrays, and other data.</li>\n              <li><b>Memory Management:</b>  The heap is managed by the JavaScript engine's garbage collector.</li>\n              <li><b>Memory Leaks:</b>  Unreleased memory causing performance degradation.</li>\n            </ul>\n          </li>\n          <li><b>Exam Material:</b>\n            <ul>\n              <li>Describe the role of the heap in JavaScript.</li>\n              <li>Explain how objects and data are stored in the heap.</li>\n              <li>Distinguish between stack and heap memory.</li>\n              <li>Explain what a memory leak is and how it impacts performance.</li>\n              <li>Compare and contrast automatic vs. manual memory management in other languages.</li>\n            </ul>\n          </li>\n        </ul>\n\n        <h3>Topic: Garbage Collection</h3>\n        <p>\n          <b>Description:</b> How JavaScript engines automatically reclaim memory that is no longer in use.\n        </p>\n        <ul>\n          <li><b>Key Concepts:</b>\n            <ul>\n              <li><b>Reachability:</b>  Objects are considered reachable if they can be accessed from the root.</li>\n              <li><b>Mark and Sweep Algorithm:</b>  A common garbage collection algorithm.</li>\n              <li><b>Reference Counting:</b>  Another garbage collection technique (less common now).</li>\n              <li><b>Garbage Collection Cycles:</b>  The process of identifying and reclaiming unused memory.</li>\n              <li><b>Performance Impact:</b> Garbage collection can pause execution and impact performance.</li>\n            </ul>\n          </li>\n          <li><b>Exam Material:</b>\n            <ul>\n              <li>Explain the purpose of garbage collection in JavaScript.</li>\n              <li>Describe the \"mark and sweep\" algorithm.</li>\n              <li>Explain the concept of \"reachability\" in garbage collection.</li>\n              <li>Explain how garbage collection prevents memory leaks.</li>\n              <li>Describe different garbage collection strategies and their trade-offs (e.g., generational garbage collection).</li>\n              <li>Explain how to optimize code to minimize garbage collection overhead.</li>\n            </ul>\n          </li>\n        </ul>\n\n        <h3>Topic: The Event Loop</h3>\n        <p>\n          <b>Description:</b> Understanding the event loop and its role in handling asynchronous operations (timers, AJAX, event listeners).\n        </p>\n        <ul>\n          <li><b>Key Concepts:</b>\n            <ul>\n              <li><b>Single-Threaded Execution:</b> JavaScript is single-threaded.</li>\n              <li><b>Asynchronous Operations:</b> Operations that don't block the main thread.</li>\n              <li><b>Callback Queue (Task Queue):</b>  Queue of tasks to be executed.</li>\n              <li><b>Microtask Queue:</b> Higher priority queue for promises.</li>\n              <li><b>Event Loop Cycle:</b> Checking the call stack and queues for tasks to execute.</li>\n              <li><b>Blocking Operations:</b> Operations that halt execution (avoid in JavaScript).</li>\n              <li><b>Web APIs (e.g., setTimeout, AJAX):</b>  Functions provided by the browser to handle asynchronous operations.</li>\n            </ul>\n          </li>\n          <li><b>Exam Material:</b>\n            <ul>\n              <li>Explain the purpose of the event loop.</li>\n              <li>Describe how the event loop handles asynchronous operations.</li>\n              <li>Explain the difference between the callback queue and the microtask queue.</li>\n              <li>Illustrate the event loop cycle with code examples.</li>\n              <li>Explain how promises are handled by the event loop.</li>\n              <li>Describe how the event loop allows JavaScript to be non-blocking.</li>\n              <li>Diagnose and solve problems related to the event loop and asynchronous code.</li>\n              <li>Explain the implications of JavaScript being single-threaded in the context of the event loop.</li>\n            </ul>\n          </li>\n        </ul>\n      </div>\n```" },
      ],
    },
  ],
});
// const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
// console.log(result.response.text());


export const GenerateStudyTypeContents = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        { text: "Generate the flashcard on topic: Flutter fundamentals, User Interface(UI) Development, Basic App Navigation in JSON format front back content Maximum 15" },
      ],
    },
    {
      role: "model",
      parts: [
        { text: "```json\n[\n  {\n    \"front\": \"What is Flutter's UI built from?\",\n    \"back\": \"Widgets! Everything in Flutter is a widget, including layouts, elements, and even the app itself.\"\n  },\n  {\n    \"front\": \"What's the difference between `StatelessWidget` and `StatefulWidget`?\",\n    \"back\": \"`StatelessWidget` is immutable (cannot change), while `StatefulWidget` can change over time and needs a `State` object.\"\n  },\n  {\n    \"front\": \"What widget is used to display text?\",\n    \"back\": \"The `Text` widget.\"\n  },\n  {\n    \"front\": \"Name three basic layout widgets.\",\n    \"back\": \"`Row`, `Column`, and `Stack` are commonly used for arranging widgets.\"\n  },\n  {\n    \"front\": \"How do you add padding around a widget?\",\n    \"back\": \"Use the `Padding` widget.  Example: `Padding(padding: EdgeInsets.all(8.0), child: childWidget)`\"\n  },\n  {\n    \"front\": \"What does the `setState()` method do?\",\n    \"back\": \"It notifies Flutter to rebuild the widget's UI when the widget's state changes.\"\n  },\n  {\n    \"front\": \"How do you navigate to a new screen/route in Flutter?\",\n    \"back\": \"Using the `Navigator` widget. Common methods are `Navigator.push()` (add a route) and `Navigator.pop()` (remove a route).\"\n  },\n  {\n    \"front\": \"What is a `MaterialApp` widget?\",\n    \"back\": \"It's the root widget for a Material Design app. It configures things like the theme, home screen, and routes.\"\n  },\n  {\n    \"front\": \"What is a `Scaffold` widget?\",\n    \"back\": \"Provides basic visual structure to a Material Design screen (AppBar, Body, FloatingActionButton, etc.).\"\n  },\n  {\n    \"front\": \"How do you define a route in Flutter?\",\n    \"back\": \"Using the `routes` parameter in `MaterialApp`. For example: `routes: {'/home': (context) => HomePage()}`\"\n  },\n    {\n    \"front\": \"What does `BuildContext` represent?\",\n    \"back\": \"It represents the location of a Widget within the Widget tree. It provides access to theme, media queries, and other information.\"\n  },\n  {\n    \"front\": \"What are `AppBar`'s typical properties?\",\n    \"back\": \"`title`, `leading`, `actions`, `backgroundColor`\"\n  },\n  {\n    \"front\": \"What is the purpose of `mainAxisAlignment` in `Row` and `Column`?\",\n    \"back\": \"Controls how the children are aligned along the main axis (horizontally in `Row`, vertically in `Column`).\"\n  },\n  {\n    \"front\": \"What is the purpose of `crossAxisAlignment` in `Row` and `Column`?\",\n    \"back\": \"Controls how the children are aligned along the cross axis (vertically in `Row`, horizontally in `Column`).\"\n  },\n  {\n    \"front\": \"How to handle user input from a button?\",\n    \"back\": \"Use a `ElevatedButton`, `TextButton` or `IconButton` with `onPressed` callback function.\"\n  }\n]\n```" },
      ],
    },
  ],
});


export const GenerateQuizAiModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {text: "Generate Quiz on topic:web development with Question and options along with correct answer in JSON format(Max 15)"},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n[\n  {\n    \"question\": \"What does HTML stand for?\",\n    \"options\": [\n      \"Hyper Text Markup Language\",\n      \"Hyper Transfer Markup Language\",\n      \"High Text Markup Language\",\n      \"Home Tool Markup Language\"\n    ],\n    \"correct_answer\": \"Hyper Text Markup Language\"\n  },\n  {\n    \"question\": \"Which of the following is NOT a programming language used for web development?\",\n    \"options\": [\n      \"JavaScript\",\n      \"Python\",\n      \"HTML\",\n      \"PHP\"\n    ],\n    \"correct_answer\": \"HTML\"\n  },\n  {\n    \"question\": \"What is CSS used for?\",\n    \"options\": [\n      \"Defining the structure of a web page\",\n      \"Adding interactivity to a web page\",\n      \"Styling the appearance of a web page\",\n      \"Managing databases\"\n    ],\n    \"correct_answer\": \"Styling the appearance of a web page\"\n  },\n  {\n    \"question\": \"What is the purpose of JavaScript?\",\n    \"options\": [\n      \"To style the web page\",\n      \"To create the structure of the web page\",\n      \"To add interactivity and dynamic behavior to web pages\",\n      \"To manage server-side logic\"\n    ],\n    \"correct_answer\": \"To add interactivity and dynamic behavior to web pages\"\n  },\n  {\n    \"question\": \"What is the DOM?\",\n    \"options\": [\n      \"Document Object Model\",\n      \"Data Object Model\",\n      \"Dynamic Object Model\",\n      \"Distributed Object Model\"\n    ],\n    \"correct_answer\": \"Document Object Model\"\n  },\n  {\n    \"question\": \"Which HTML tag is used to define an unordered list?\",\n    \"options\": [\n      \"<ol>\",\n      \"<ul>\",\n      \"<li>\",\n      \"<dl>\"\n    ],\n    \"correct_answer\": \"<ul>\"\n  },\n  {\n    \"question\": \"What is a framework in web development?\",\n    \"options\": [\n      \"A complete website ready to be deployed\",\n      \"A set of pre-written code and tools that simplifies development\",\n      \"A type of hardware used for web servers\",\n      \"A graphical design software\"\n    ],\n    \"correct_answer\": \"A set of pre-written code and tools that simplifies development\"\n  },\n  {\n    \"question\": \"Which of the following is a popular JavaScript framework/library?\",\n    \"options\": [\n      \"Bootstrap\",\n      \"Sass\",\n      \"jQuery\",\n      \"All of the above\"\n    ],\n    \"correct_answer\": \"jQuery\"\n  },\n    {\n    \"question\": \"What is the purpose of the `alt` attribute in an `<img>` tag?\",\n    \"options\": [\n      \"To specify the image source\",\n      \"To provide alternative text for screen readers and when the image cannot be loaded\",\n      \"To set the image alignment\",\n      \"To define the image size\"\n    ],\n    \"correct_answer\": \"To provide alternative text for screen readers and when the image cannot be loaded\"\n  },\n  {\n    \"question\": \"What is the role of a web server?\",\n    \"options\": [\n      \"To design the user interface of a website\",\n      \"To store, process, and deliver web pages to clients\",\n      \"To manage client-side JavaScript code\",\n      \"To create databases for websites\"\n    ],\n    \"correct_answer\": \"To store, process, and deliver web pages to clients\"\n  },\n  {\n    \"question\": \"What is the purpose of responsive web design?\",\n    \"options\": [\n      \"To make websites load faster\",\n      \"To make websites look good on all devices and screen sizes\",\n      \"To make websites more secure\",\n      \"To improve website SEO\"\n    ],\n    \"correct_answer\": \"To make websites look good on all devices and screen sizes\"\n  },\n  {\n    \"question\": \"What is a cookie?\",\n    \"options\": [\n      \"A small piece of data stored on the user's computer by the web browser.\",\n      \"A type of malware\",\n      \"A JavaScript library\",\n      \"A CSS property\"\n    ],\n    \"correct_answer\": \"A small piece of data stored on the user's computer by the web browser.\"\n  },\n  {\n    \"question\": \"What is the purpose of a version control system like Git?\",\n    \"options\": [\n      \"To manage website content\",\n      \"To track changes to code and collaborate with others\",\n      \"To optimize website performance\",\n      \"To design website layouts\"\n    ],\n    \"correct_answer\": \"To track changes to code and collaborate with others\"\n  },\n  {\n    \"question\": \"What is the box model in CSS?\",\n    \"options\": [\n      \"A way to create 3D effects in CSS\",\n      \"A model that describes how elements are rendered on a web page, including content, padding, border, and margin\",\n      \"A JavaScript framework for creating responsive layouts\",\n      \"A database schema for storing website data\"\n    ],\n    \"correct_answer\": \"A model that describes how elements are rendered on a web page, including content, padding, border, and margin\"\n  },\n  {\n      \"question\": \"Which HTTP method is typically used to retrieve data from a server?\",\n      \"options\": [\"POST\", \"PUT\", \"DELETE\", \"GET\"],\n      \"correct_answer\": \"GET\"\n  }\n]\n```"},
      ],
    },
  ],
});


export const GenerateQAAiModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {text: "Generate a list of frequently asked questions (FAQs) along with answers for the topic: database.  Include a mix of short-answer and long-answer questions in JSON format (max 15)."},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n[\n  {\n    \"question\": \"What is a database?\",\n    \"answer\": \"A database is an organized collection of structured information, or data, typically stored electronically in a computer system. It is designed to allow efficient storage, retrieval, modification, and deletion of data.\"\n  },\n  {\n    \"question\": \"What is a DBMS?\",\n    \"answer\": \"DBMS stands for Database Management System. It is a software system that allows users to define, create, maintain, and control access to the database.\"\n  },\n  {\n    \"question\": \"What are the different types of databases?\",\n    \"answer\": \"Common types include Relational Databases (e.g., MySQL, PostgreSQL, Oracle), NoSQL Databases (e.g., MongoDB, Cassandra), Object-Oriented Databases, Graph Databases, and In-Memory Databases.\"\n  },\n  {\n    \"question\": \"What is SQL?\",\n    \"answer\": \"SQL stands for Structured Query Language. It is the standard language for interacting with relational database management systems. It's used to perform operations like querying, inserting, updating, and deleting data.\"\n  },\n  {\n    \"question\": \"What is a primary key?\",\n    \"answer\": \"A primary key is a unique identifier for each record in a table. It ensures that each row is uniquely distinguishable from all other rows.\"\n  },\n  {\n    \"question\": \"What is a foreign key?\",\n    \"answer\": \"A foreign key is a field in one table that refers to the primary key of another table. It establishes a link between the two tables and enforces referential integrity.\"\n  },\n  {\n    \"question\": \"What is normalization in databases?\",\n    \"answer\": \"Normalization is the process of organizing data in a database to reduce redundancy and improve data integrity. It involves dividing databases into tables and defining relationships between the tables. The goal is to eliminate data anomalies like insertion, update, and deletion anomalies.\"\n  },\n  {\n    \"question\": \"What are the benefits of using a database?\",\n    \"answer\": \"Benefits include: Data integrity and consistency, reduced data redundancy, improved data accessibility and sharing, enhanced data security, improved data backup and recovery, and better decision-making capabilities.\"\n  },\n  {\n    \"question\": \"What is an index in a database?\",\n    \"answer\": \"An index is a data structure that improves the speed of data retrieval operations on a database table. It acts like an index in a book, allowing the database engine to quickly locate specific rows without scanning the entire table.\"\n  },\n  {\n    \"question\": \"Explain the difference between `WHERE` and `HAVING` clauses in SQL.\",\n    \"answer\": \"The `WHERE` clause filters rows *before* any grouping or aggregation occurs. It operates on individual rows. The `HAVING` clause, on the other hand, filters groups *after* aggregation has been performed. It's used with the `GROUP BY` clause to filter results based on aggregate functions (e.g., `COUNT`, `SUM`, `AVG`).\"\n  },\n  {\n    \"question\": \"What are ACID properties in database transactions?\",\n    \"answer\": \"ACID stands for Atomicity, Consistency, Isolation, and Durability. These properties ensure that database transactions are processed reliably. \\n\\n*   **Atomicity:** The entire transaction is treated as a single, indivisible unit of work. Either all changes are committed, or none are.\\n*   **Consistency:** The transaction ensures that the database remains in a valid state after the transaction completes.\\n*   **Isolation:** Concurrent transactions are isolated from each other. Changes made by one transaction are not visible to other transactions until the first transaction is committed.\\n*   **Durability:** Once a transaction is committed, the changes are permanent and will survive even system failures.\"\n  },\n  {\n    \"question\": \"What is the purpose of a database backup?\",\n    \"answer\": \"A database backup is a copy of the database that can be used to restore the database to a previous state in case of data loss due to hardware failure, software errors, human error, or malicious attacks. Backups are crucial for data recovery and business continuity.\"\n  },\n  {\n    \"question\": \"What is"},
      ],
    },
  ],
});